######################################################
#
# Oracle CBD Monitoring
# ist ok DB Time wen die Zeit 60min ist zwischen einem AWR Snapshot -  select STAT_NAME, VALUE,(VALUE - LAG(value,1)over(order by BEGIN_INTERVAL_TIME)) /1000000/60/60,2 as last,  BEGIN_INTERVAL_TIME, END_INTERVAL_TIME from dba_hist_sys_time_model m join dba_hist_snapshot s  on (s.snap_id = m.snap_id) where STAT_NAME = 'DB time' order by BEGIN_INTERVAL_TIME DESC fetch first 1 rows only
# noch nicht ok select STAT_NAME, VALUE,(VALUE - LAG(value,1)over(order by BEGIN_INTERVAL_TIME)) /1000000/60/60,2 as last, BEGIN_INTERVAL_TIME, END_INTERVAL_TIME from dba_hist_sys_time_model m join dba_hist_snapshot s  on (s.snap_id = m.snap_id) where STAT_NAME = 'DB CPU' order by BEGIN_INTERVAL_TIME DESC fetch first 1 rows only
######################################################

[[metric]]
context = "logins_last_5h"
metricsdesc = { dbusername="DB Username", client_program_name="Client Program Name", timestamp="Timestamp", userhost="Userhost", dbuser_logins="Logins last 5h"}
labels= ["dbusername", "client_program_name", "timestamp", "userhost"]
request = "select CURRENT_USER,client_program_name,to_char(event_timestamp,'yyyy-mm-dd hh24') as timestamp,HOST_NAME,count(*) as dbuser_logins from AUDSYS.AUD$UNIFIED where event_timestamp between sysdate-1/2  and trunc(sysdate,'hh24') and ACTION = 100 group by CURRENT_USER,client_program_name,to_char(event_timestamp,'yyyy-mm-dd hh24'),HOST_NAME;"
ignorezeroresult = true
metricstype = { dbuser_logins = "counter" }
# Test mit prometheus_read ok.

[[metric]]
context = "recovery_space_used"
metricsdesc = { file_type="Typ", percent_space_used="Usage in percent"}
labels= ["file_type", "percent_space_used"]
request = "select file_type, percent_space_used from v$recovery_area_usage"
metricstype = { percent_space_used = "counter" }
# Test mit prometheus_read ok.

[[metric]]
context = "recovery_space_reclaimable"
metricsdesc = { file_type="Typ", percent_space_reclaimable="reclaimable space"}
labels= ["file_type", "percent_space_reclaimable"]
request = "select file_type, percent_space_reclaimable from v$recovery_area_usage"
metricstype = { percent_space_reclaimable = "counter" }
# Test mit prometheus_read ok.

[[metric]]
context = "recovery_files"
metricsdesc = { file_type="Typ", number_of_files="Number of files"}
labels= ["file_type", "number_of_files"]
request = "select file_type, number_of_files from v$recovery_area_usage"
metricstype = { number_of_files = "counter" }
# Test mit prometheus_read ok.

[[metric]]
context = "failed_logins_last_5h"
metricsdesc = { dbusername="DB Username", client_program_name="Client Program Name", timestamp="Timestamp", userhost="Userhost", failed_dbuser_logins="Logins last 5h"}
labels= ["dbusername", "client_program_name", "timestamp", "userhost"]
request = "select CURRENT_USER,client_program_name,to_char(event_timestamp,'yyyy-mm-dd hh24') as timestamp, HOST_NAME, count(*) as failed_dbuser_logins from AUDSYS.AUD$UNIFIED where event_timestamp between sysdate-1/6  and trunc(sysdate,'hh24') and ACTION = 100 and return_code !=0 group by CURRENT_USER,client_program_name,to_char(event_timestamp,'yyyy-mm-dd hh24'),HOST_NAME"
metricstype = { failed_dbuser_logins = "counter" }
# Test mit prometheus_read ok.

[[metric]]
context = "count_db_blocking_Locks"
metricsdesc = { count_db_blocks="Gauge metric with count of Blocking Sessions." }
request = "select count(*) as count_db_blocks from v$session where blocking_session is not NULL"
metricstype = { count_db_blocks="counter" }
# Test mit prometheus_read ok.

[[metric]]
context = "slow_queries"
metricsdesc = { p95_time_usecs= "Gauge metric with percentile 95 of elapsed time.", p99_time_usecs= "Gauge metric with percentile 99 of elapsed time." }
request = "select  percentile_disc(0.95)  within group (order by elapsed_time) as p95_time_usecs, percentile_disc(0.99)  within group (order by elapsed_time) as p99_time_usecs from v$sql where last_active_time >= sysdate - 5/(24*60)"
metricstype = { p95_time_usecs="counter", p99_time_usecs="counter" }
# Test mit prometheus_read ok.

[[metric]]
context = "big_queries"
metricsdesc = { p95_rows= "Gauge metric with percentile 95 of returned rows.", p99_rows= "Gauge metric with percentile 99 of returned rows." }
request = "select  percentile_disc(0.95)  within group (order by rownum) as p95_rows, percentile_disc(0.99)  within group (order by rownum) as p99_rows from v$sql where last_active_time >= sysdate - 5/(24*60)"
metricstype = { p95_rows="counter", p99_rows="counter" }
# Test mit prometheus_read ok.

[[metric]]
context = "cache_hit_ratio"
metricsdesc = {percentage="Gauge metric with the cache hit ratio."}
request = "select Round(((Sum(Decode(a.name, 'consistent gets', a.value, 0)) + Sum(Decode(a.name, 'db block gets', a.value, 0)) - Sum(Decode(a.name, 'physical reads', a.value, 0))  )/ (Sum(Decode(a.name, 'consistent gets', a.value, 0)) + Sum(Decode(a.name, 'db block gets', a.value, 0)))) *100,2) as percentage FROM v$sysstat a"
# Test mit prometheus_read ok.

[[metric]]
context = "startup"
metricsdesc = {time_seconds="Database startup time in seconds."}
request = "SELECT (SYSDATE - STARTUP_TIME) * 24 * 60 * 60 AS time_seconds FROM V$INSTANCE"
# Test mit prometheus_read ok.